"""Directory use case for swc: minifying a folder of code-split files

This has to be a directory-in, directory-out pattern since the codesplitter produces unpredictable filenames.

Note that this example also depends on the setup in /WORKSPACE at the root of this repository.
"""

load("@aspect_rules_swc//swc:swc.bzl", "swc")
load(":mocks.bzl", "mock_codesplit")

mock_codesplit(
    name = "split_app",
)

# Runs `swc in.ts > ../../bazel-bin/examples/simple/in.js`
# You can run `bazel build --subcommands //examples/simple:transpile`
# to see the exact command line Bazel runs.
# Note that by default, sources are found by glob(["**/*.ts"])
swc(
    name = "minify",
    srcs = ["split_app"],
    output_dir = True,
)

# # Assert that the output of "transpile" rule matches the expected file.
# diff_test(
#     name = "test",
#     # This is a pre-declared output of the "transpile" rule, so we can refer to it directly using a Bazel label
#     # even though the file itself is generated by Bazel in ../../bazel-bin/examples/simple/in.js
#     file1 = "in.js",
#     # The expected result contents
#     file2 = "expected.js",
# )
